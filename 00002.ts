/*
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

function getEvenFibonacciNumbers(limit: number): Array<number> {
  const fibonacciNumbers: Array<number> = [2];

  let x = 1;
  let y = 2;

  do {
    let sum = x + y;
    x = y;
    y = sum;

    if (y % 2 === 0) {
      fibonacciNumbers.push(y);
    }
  } while (x < limit && y < limit);

  return fibonacciNumbers;
}

function sumNumbers(fibNums: Array<number>): number {
  let sum = 0;
  fibNums.forEach((integer) => {
    sum += integer;
  });
  return sum;
}

function getAndSumEvenFibNums(limit: number): number {
  let fibSum = 0;

  let x = 1;
  let y = 2;

  do {
    let sum = x + y;
    x = y;
    y = sum;

    if (y % 2 === 0) {
      fibSum += y;
    }
  } while (x < limit && y < limit);

  return fibSum;
}

function main() {
  const LIMIT = 4_000_000;

  console.time("getThenSumFibonacci");
  const fibNums = getEvenFibonacciNumbers(LIMIT);
  console.log(
    `The count of even Fibonacci Numbers to the limit of ${LIMIT} are ${fibNums.toString()}`
  );
  console.log(`The sum of these numbers is ${sumNumbers(fibNums)}`);
  console.timeEnd("getThenSumFibonacci");

  console.log("----------------------------------------------------");

  console.time("getAndSumFibonacci");
  console.log(
    `The sum of even Fibonacci Numbers to the limit of ${LIMIT} are ${getAndSumEvenFibNums(
      LIMIT
    )}`
  );
  console.timeEnd("getAndSumFibonacci");
}

main();
